name: Build Android release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:
  # optional: on: push: tags: - 'v*'  to create on tag pushes

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest
    env:
      JAVA_HOME_11_X64: /opt/hostedtoolcache/jdk/11/x64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set up Android SDK (cmdline tools + platform-tools)
        uses: android-actions/setup-android@v3
        with:
          api-level: 33
          ndk: ''
          build-tools: '33.0.2'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew || true

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*','**/*.gradle.kts') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Print Gradle projects (helpful to detect module name)
        run: ./gradlew -q projects || true

      - name: Build release APK
        # Replace with :app:assembleRelease if your module is named 'app'
        run: |
          # try module-specific first (safer), fallback to generic assembleRelease
          if ./gradlew :app:assembleRelease -q; then
            echo "Built :app:assembleRelease"
          else
            echo "Trying plain assembleRelease (may succeed if single-module)"
            ./gradlew assembleRelease -Porg.gradle.jvmargs="-Xmx3g" --no-daemon
          fi

      - name: Decode release keystore (from secret) and place it
        if: success() && github.event_name != 'pull_request'
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ./release.keystore
            echo "Keystore written to ./release.keystore"
          else
            echo "No KEYSTORE_BASE64 secret found â€” skipping keystore step (unsigned APK or signing via gradle config may be used)."
          fi

      - name: Locate built APK(s)
        id: find_apks
        run: |
          set -e
          # Gradle output path common patterns:
          apk_paths=$(find . -type f -path "*/build/outputs/apk/*/release/*.apk" -print || true)
          if [ -z "$apk_paths" ]; then
            echo "No apk found in default outputs; listing build tree for debugging"
            find . -maxdepth 4 -type d -name build -print
            exit 0
          fi
          echo "::set-output name=apk_paths::$apk_paths"
      - name: Upload APK artifact
        if: steps.find_apks.outputs.apk_paths != ''
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: ${{ steps.find_apks.outputs.apk_paths }}

      - name: Create GitHub Release (draft) and attach APKs
        if: github.ref == 'refs/heads/main' && steps.find_apks.outputs.apk_paths != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body: Automated release build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK(s) to Release
        if: github.ref == 'refs/heads/main' && steps.find_apks.outputs.apk_paths != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.run_number }}
          name: dummy
          files: ${{ steps.find_apks.outputs.apk_paths }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
