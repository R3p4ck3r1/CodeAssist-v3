name: Build Android release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build & release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Set up Android SDK (cmdline tools + packages)
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 'latest'
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false
          packages: |
            platform-tools
            cmdline-tools;latest
            platforms;android-33
            build-tools;33.0.2
            ndk;21.4.7075529

      - name: Ensure gradlew is executable if present
        run: chmod +x ./gradlew || true

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*','**/*.gradle.kts') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Print Gradle projects (debug)
        run: |
          if [ -f ./gradlew ]; then
            ./gradlew -q projects || true
          else
            echo "No ./gradlew found; skipping gradle projects listing"
          fi

      - name: Build (gradle first, fallback to common custom build hooks)
        id: run_build
        run: |
          set -euo pipefail
          BUILD_OK=false
          echo "Trying Gradle-based builds if gradlew exists..."

          if [ -f ./gradlew ]; then
            echo "Found ./gradlew - attempting :app:assembleRelease"
            if ./gradlew :app:assembleRelease -q --no-daemon; then
              BUILD_OK=true
              echo "Gradle :app:assembleRelease succeeded"
            else
              echo ":app:assembleRelease failed; trying generic assembleRelease"
              if ./gradlew assembleRelease -q --no-daemon; then
                BUILD_OK=true
                echo "Gradle assembleRelease succeeded"
              else
                echo "Gradle assembleRelease also failed"
              fi
            fi
          else
            echo "No gradlew in repo"
          fi

          if [ "$BUILD_OK" = false ]; then
            echo "Trying common custom build hooks..."
            # common project build scripts â€” try them in order (best-effort)
            if [ -x ./build.sh ]; then
              echo "Running ./build.sh"
              if ./build.sh --release || ./build.sh; then
                BUILD_OK=true
                echo "./build.sh succeeded"
              else
                echo "./build.sh failed"
              fi
            fi

            if [ "$BUILD_OK" = false ] && [ -x ./scripts/build.sh ]; then
              echo "Running scripts/build.sh"
              if ./scripts/build.sh --release || ./scripts/build.sh; then
                BUILD_OK=true
                echo "scripts/build.sh succeeded"
              else
                echo "scripts/build.sh failed"
              fi
            fi

            # check for a package.json script hook (optional)
            if [ "$BUILD_OK" = false ] && [ -f package.json ]; then
              if jq -e '.scripts["build:android"]' package.json > /dev/null 2>&1; then
                echo "Running npm run build:android"
                if npm run build:android --if-present; then
                  BUILD_OK=true
                  echo "npm run build:android succeeded"
                else
                  echo "npm run build:android failed"
                fi
              fi
            fi
          fi

          if [ "$BUILD_OK" = false ]; then
            echo "No known build process succeeded. The workflow will continue to attempt to locate any produced APK(s) (if any) for debugging."
          fi

          # expose whether build succeeded
          echo "build_ok=$BUILD_OK" >> $GITHUB_OUTPUT

      - name: Decode release keystore (optional)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ./release.keystore
            echo "Wrote ./release.keystore"
          else
            echo "No KEYSTORE_BASE64 secret provided; skipping keystore decode"
          fi

      - name: Find APK(s)
        id: find_apks
        run: |
          set -euo pipefail
          # first, try common Gradle release path(s)
          apk_list=$(find . -type f -path "*/build/outputs/apk/*/release/*.apk" -print 2>/dev/null || true)
          # fall back to any apk if none found
          if [ -z "$apk_list" ]; then
            apk_list=$(find . -type f -name "*.apk" -print 2>/dev/null || true)
          fi
          # convert to space-separated single-line
          apk_list=$(echo "$apk_list" | tr '\n' ' ' | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
          echo "Found APK(s): $apk_list"
          # set output for other steps
          echo "apk_paths<<EOF" >> $GITHUB_OUTPUT
          echo "$apk_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Optionally sign APK(s) with apksigner (if keystore present)
        if: ${{ steps.find_apks.outputs.apk_paths != '' && secrets.KEYSTORE_BASE64 != '' }}
        run: |
          set -euo pipefail
          apk_paths="${{ steps.find_apks.outputs.apk_paths }}"
          # resolve Android SDK build-tools path; try a few env vars
          BUILD_TOOLS_PATH=""
          if [ -n "${ANDROID_SDK_ROOT:-}" ] && [ -d "${ANDROID_SDK_ROOT}/build-tools" ]; then
            # try latest installed folder
            BUILD_TOOLS_PATH=$(ls -d ${ANDROID_SDK_ROOT}/build-tools/* | sort -V | tail -n1 || true)
          fi
          if [ -z "$BUILD_TOOLS_PATH" ] && [ -n "${ANDROID_HOME:-}" ] && [ -d "${ANDROID_HOME}/build-tools" ]; then
            BUILD_TOOLS_PATH=$(ls -d ${ANDROID_HOME}/build-tools/* | sort -V | tail -n1 || true)
          fi
          if [ -z "$BUILD_TOOLS_PATH" ]; then
            echo "WARNING: could not determine build-tools path; apksigner may not be available"
            exit 0
          fi
          APKSIGNER="$BUILD_TOOLS_PATH/apksigner"
          if [ ! -x "$APKSIGNER" ]; then
            echo "apksigner not found at $APKSIGNER; skipping signing"
            exit 0
          fi
          for apk in $apk_paths; do
            if [ -f "$apk" ]; then
              echo "Signing $apk"
              "$APKSIGNER" sign --ks ./release.keystore --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} --ks-key-alias "${{ secrets.KEY_ALIAS }}" --key-pass pass:${{ secrets.KEY_PASSWORD }} "$apk" || { echo "apksigner failed for $apk"; exit 1; }
              echo "Signed $apk"
            else
              echo "APK not found: $apk (skipping)"
            fi
          done

      - name: Upload APK artifact(s)
        if: ${{ steps.find_apks.outputs.apk_paths != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: ${{ steps.find_apks.outputs.apk_paths }}

      - name: Create GitHub Release and attach APK(s)
        if: ${{ steps.find_apks.outputs.apk_paths != '' && github.ref == 'refs/heads/main' }}
        uses: ncipollo/release-action@v1
        with:
          tag: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: ${{ steps.find_apks.outputs.apk_paths }}

      - name: Debug - list build tree (for troubleshooting)
        if: ${{ steps.find_apks.outputs.apk_paths == '' }}
        run: |
          echo "No APKs found by the automated search. Listing build/ output trees for debugging:"
          find . -maxdepth 5 -type d -name build -print || true
          echo "Project root tree (top 3 levels):"
          find . -maxdepth 3 -print || true
          
